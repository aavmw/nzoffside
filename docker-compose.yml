services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20
    # Remove public port in prod unless you really need to reach DB from outside
    ports:
      - "5432:5432"

  api:
    image: ghcr.io/aavmw/nzoffside-api:${API_IMAGE_TAG:-latest}   # <â€” PREBUILT image from Docker Hub
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_NAME: ${POSTGRES_DB}
      APP_ENV: production
      TZ: Europe/Prague
    depends_on:
      db:
        condition: service_healthy
    # do NOT publish the API port publicly; only expose inside the network
    expose:
      - "8000"
    volumes:
      - ./secrets:/app/secrets:ro
      # If you keep a service-account file:
      # - /opt/nzoffside/secrets/google_sa.json:/app/google_sa.json:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8000/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 15

  nginx:
    image: nginx:1.27
    restart: unless-stopped
    depends_on:
      - api
    ports:
      - "80:80"
      # If/when you add TLS certs, also map 443:
      # - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro

  backup:
    image: postgres:16-alpine
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      TZ: Europe/Prague
      PGHOST: db
      PGPORT: 5432
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB}
      BACKUP_DIR: /var/backups/postgres
      RETENTION_DAYS: 7
    volumes:
      - ./pg_backups:/var/backups/postgres
      - ./scripts/pg_backup.sh:/usr/local/bin/pg_backup.sh:ro
      - ./cron/backup.cron:/etc/crontabs/root:ro
    command: ["crond","-f","-l","2"]
    healthcheck:
      test: ["CMD-SHELL", "test -n \"$(find /var/backups/postgres -name '*.dump' -mtime -1)\" || exit 1"]
      interval: 5m
      timeout: 5s
      retries: 5

volumes:
  pg_data:
