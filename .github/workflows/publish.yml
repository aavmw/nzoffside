name: Build & Publish Docker image (GHCR) + optional Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_OWNER: aavmw           # PAT owner (lowercase)
  IMAGE_NAME: nzoffside-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Ensure GHCR_PAT is available
        run: |
          if [ -z "${{ secrets.GHCR_PAT }}" ]; then
            echo "Secret GHCR_PAT is missing. Add a PAT (classic) with write:packages." >&2
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute tags
        id: meta
        shell: bash
        run: |
          echo "sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          echo "date=$(date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "ref_tag=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          else
            echo "ref_tag=" >> "$GITHUB_OUTPUT"
          fi

      - name: Login to GHCR (PAT)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.IMAGE_OWNER }}     # <- critical: PAT owner's username
          password: ${{ secrets.GHCR_PAT }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha }}
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.date }}
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:latest
            ${{ steps.meta.outputs.ref_tag != '' && format('{0}/{1}/{2}:{3}', env.IMAGE_REGISTRY, env.IMAGE_OWNER, env.IMAGE_NAME, steps.meta.outputs.ref_tag) || '' }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

  deploy:
    # Deploy on tag pushes or manual runs
    if: ${{ github.ref_type == 'tag' || github.event_name == 'workflow_dispatch' }}
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Figure out tag to deploy
        id: pick
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "tag=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=$(date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"
          fi

      # Only run deploy if all three secrets are present
      - name: Check deploy secrets
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY:  ${{ secrets.SSH_KEY }}
        run: |
          for var in SSH_HOST SSH_USER SSH_KEY; do
            if [ -z "${!var}" ]; then
              echo "$var is missing; skipping deploy."
              exit 78  # special code to mark step as neutral in some runners
            fi
          done

      - name: SSH deploy (compose pull & up)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key:      ${{ secrets.SSH_KEY }}
          request_pty: false
          command_timeout: 15m
          script: |
            set -euo pipefail
            DEPLOY_DIR="${HOME}/apps/nzoffside"
            mkdir -p "$DEPLOY_DIR"
            cd "$DEPLOY_DIR"

            IMAGE="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}"
            TAG="${{ steps.pick.outputs.tag }}"
            
            # login to GHCR on the remote using the same PAT
            echo "${{ secrets.GHCR_PAT }}" | docker login ${{ env.IMAGE_REGISTRY }} -u "${{ env.IMAGE_OWNER }}" --password-stdin

            # If your docker-compose.yml uses env var for tag, e.g.:
            #   image: ghcr.io/aavmw/nzoffside-api:${API_IMAGE_TAG:-latest}
            # then:
            echo "API_IMAGE_TAG=$TAG" > .env.api_tag

            # Pull images
            docker compose pull --quiet

            # Ensure DB is up (and healthy) for migrations
            docker compose up -d db

            # Run Alembic migrations inside the new image
            # (Assumes alembic is installed in the image and your env vars are correct)
            docker compose run --rm -T --entrypoint "" \
              -e SQLALCHEMY_SILENCE_UBER_WARNING=1 \
              api alembic upgrade head

            # Start/refresh API
            docker compose up -d api

            # Optional cleanup
            docker image prune -f